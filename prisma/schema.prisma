// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Korisnik {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  lozinka     String
  ime         String?
  prezime     String?
  rezervacije Rezervacija[]
}

model Apartman {
  id          Int           @id @default(autoincrement())
  naziv       String
  opis        String
  cijena      Float
  slike       String[]
  rezervacije Rezervacija[]
}

model Rezervacija {
  id          Int       @id @default(autoincrement())
  apartman    Apartman  @relation(fields: [apartmanId], references: [id])
  apartmanId  Int
  korisnik    Korisnik?  @relation(fields: [korisnikId], references: [id])
  korisnikId  Int?
  pocetak     DateTime
  kraj        DateTime
  gosti       Int
  status      String    @default("na ƒçekanju")
  createdAt   DateTime  @default(now())
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  role          Role     @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum Role {
  ADMIN
  USER
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

